{"ast":null,"code":"var _jsxFileName = \"/Users/moomin/Front-end/react/todoappReducer/src/components/todo/contexts/TodoContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useReducer } from \"react\";\nimport { todoReducers } from \"../reducers/todoReducer\";\n// state interface (context)\n// 1. state의 원형 제작\n//  1-1. state를 변경시킬 함수들의 원형을 제작. (객체 리터럴 형태로)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TodoContext = /*#__PURE__*/createContext({\n  // 아래를 작성하는 이유. 나중에 자동완성 기능을 쓰기 위해\n  contextTodo: [],\n  // event를 받는 이유? checkbox를 체크 / 체크해제 했을 때, 해당 checkbox값을 얻어 오기 위해서.\n  contextDone(event) {},\n  contextAddTodo(task, dueDate, alertRef) {}\n  // reducer를 만들기 위해 두개 구현\n});\n\n// 2. state interface implementation (Contextprovider)\n//  2-1. context의 함수들(1-1)을 구현.\nexport function TodoContextProvider({\n  children\n}) {\n  _s();\n  // 왜 여기서 state를 또 만드냐? 위에서 만든건 인터페이스\n  // 가져야 하는 초기값은 배열.\n  //const [todo, setTodo] = useState([\n  //{ id: 0, isDone: true, task: \"ABC\", dueDate: \"2024-11-20\" },\n  //]); // 여기에 todo-Item을 넣어서 테스트를 한번 해본다. 근데 안됌\n  // useState를 쓸 수 없는 곳에다가 쓴 것. 위의 context를 공급해주는게 TodoContextProvider. 공급 받을 컴포넌트에서 TodoContextProvider로 적어놨음.\n  // 이걸 쓸수 있는 애는 Todo와 AddTodo. provider를 useContext로 쓰고 싶으면 provider를 공급받는 컴포넌트를 새로 만들어야 함. 내가 주는 컴포넌트에서는 못씀.\n\n  // 이렇게 state를 만들면 위에 넣어준다.\n\n  // reducer를 쓰겠다. []는 reducer가 관리할 기본 값. 이 기본값이 todoReducer의 state로 전달됨.(비어있음)\n  const [todo, todoDispatcher] = useReducer(todoReducers, []); // dispather가 todoReducer 호출하고 action 정보를 전달함. setTodo 대체.\n\n  const contextImplementation = {\n    // app.js에서 가져옴.\n    contextTodo: todo,\n    // todo 자체가 배열\n    contextDone(event) {\n      const checkedDoneId = parseInt(event.target.value);\n      const isChecked = event.target.checked;\n      // dispatcher 등록\n      todoDispatcher({\n        type: \"DONE\",\n        payload: {\n          id: checkedDoneId,\n          isChecked\n        }\n      });\n    },\n    contextAddTodo(task, dueDate, alertRef) {\n      let alertMessages = [];\n      if (!task) {\n        alertMessages.push(\"task를 입력하세요.\");\n      }\n      if (!dueDate) {\n        alertMessages.push(\"due date를 입력하세요.\");\n      }\n\n      // Modal을 위한 조건\n      if (!task || !dueDate) {\n        // show에 전달할 배열을 만들어서 넣어줘야 함.\n        alertRef.current.show(alertMessages);\n        //alert(\"내용을 입력해야 합니다.\");\n        return false;\n      }\n      // key value가 동일하기 때문에 : task, :dueDate 생략\n      todoDispatcher({\n        type: \"ADD\",\n        payload: {\n          task,\n          dueDate\n        }\n      });\n      return true;\n    }\n  };\n\n  // 3. ContextProvider를 전역으로 구성.\n  //  3-1. ContextProvider를 사용할 컴포넌트들을 관리.\n  return /*#__PURE__*/_jsxDEV(TodoContext.Provider, {\n    value: contextImplementation,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n_s(TodoContextProvider, \"pYr6FZquQU2yPGFGPmR+mnb0+A8=\");\n_c = TodoContextProvider;\nvar _c;\n$RefreshReg$(_c, \"TodoContextProvider\");","map":{"version":3,"names":["createContext","useReducer","todoReducers","jsxDEV","_jsxDEV","TodoContext","contextTodo","contextDone","event","contextAddTodo","task","dueDate","alertRef","TodoContextProvider","children","_s","todo","todoDispatcher","contextImplementation","checkedDoneId","parseInt","target","value","isChecked","checked","type","payload","id","alertMessages","push","current","show","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/moomin/Front-end/react/todoappReducer/src/components/todo/contexts/TodoContext.js"],"sourcesContent":["import { createContext, useReducer } from \"react\";\nimport { todoReducers } from \"../reducers/todoReducer\";\n// state interface (context)\n// 1. state의 원형 제작\n//  1-1. state를 변경시킬 함수들의 원형을 제작. (객체 리터럴 형태로)\nexport const TodoContext = createContext({\n  // 아래를 작성하는 이유. 나중에 자동완성 기능을 쓰기 위해\n  contextTodo: [],\n  // event를 받는 이유? checkbox를 체크 / 체크해제 했을 때, 해당 checkbox값을 얻어 오기 위해서.\n  contextDone(event) {},\n  contextAddTodo(task, dueDate, alertRef) {},\n  // reducer를 만들기 위해 두개 구현\n});\n\n// 2. state interface implementation (Contextprovider)\n//  2-1. context의 함수들(1-1)을 구현.\nexport function TodoContextProvider({ children }) {\n  // 왜 여기서 state를 또 만드냐? 위에서 만든건 인터페이스\n  // 가져야 하는 초기값은 배열.\n  //const [todo, setTodo] = useState([\n  //{ id: 0, isDone: true, task: \"ABC\", dueDate: \"2024-11-20\" },\n  //]); // 여기에 todo-Item을 넣어서 테스트를 한번 해본다. 근데 안됌\n  // useState를 쓸 수 없는 곳에다가 쓴 것. 위의 context를 공급해주는게 TodoContextProvider. 공급 받을 컴포넌트에서 TodoContextProvider로 적어놨음.\n  // 이걸 쓸수 있는 애는 Todo와 AddTodo. provider를 useContext로 쓰고 싶으면 provider를 공급받는 컴포넌트를 새로 만들어야 함. 내가 주는 컴포넌트에서는 못씀.\n\n  // 이렇게 state를 만들면 위에 넣어준다.\n\n  // reducer를 쓰겠다. []는 reducer가 관리할 기본 값. 이 기본값이 todoReducer의 state로 전달됨.(비어있음)\n  const [todo, todoDispatcher] = useReducer(todoReducers, []); // dispather가 todoReducer 호출하고 action 정보를 전달함. setTodo 대체.\n\n  const contextImplementation = {\n    // app.js에서 가져옴.\n    contextTodo: todo, // todo 자체가 배열\n    contextDone(event) {\n      const checkedDoneId = parseInt(event.target.value);\n      const isChecked = event.target.checked;\n      // dispatcher 등록\n      todoDispatcher({\n        type: \"DONE\",\n        payload: { id: checkedDoneId, isChecked },\n      });\n    },\n    contextAddTodo(task, dueDate, alertRef) {\n      let alertMessages = [];\n      if (!task) {\n        alertMessages.push(\"task를 입력하세요.\");\n      }\n\n      if (!dueDate) {\n        alertMessages.push(\"due date를 입력하세요.\");\n      }\n\n      // Modal을 위한 조건\n      if (!task || !dueDate) {\n        // show에 전달할 배열을 만들어서 넣어줘야 함.\n        alertRef.current.show(alertMessages);\n        //alert(\"내용을 입력해야 합니다.\");\n        return false;\n      }\n      // key value가 동일하기 때문에 : task, :dueDate 생략\n      todoDispatcher({ type: \"ADD\", payload: { task, dueDate } });\n      return true;\n    },\n  };\n\n  // 3. ContextProvider를 전역으로 구성.\n  //  3-1. ContextProvider를 사용할 컴포넌트들을 관리.\n  return (\n    <TodoContext.Provider value={contextImplementation}>\n      {children}\n    </TodoContext.Provider>\n  );\n}\n"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,UAAU,QAAQ,OAAO;AACjD,SAASC,YAAY,QAAQ,yBAAyB;AACtD;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,WAAW,gBAAGL,aAAa,CAAC;EACvC;EACAM,WAAW,EAAE,EAAE;EACf;EACAC,WAAWA,CAACC,KAAK,EAAE,CAAC,CAAC;EACrBC,cAAcA,CAACC,IAAI,EAAEC,OAAO,EAAEC,QAAQ,EAAE,CAAC;EACzC;AACF,CAAC,CAAC;;AAEF;AACA;AACA,OAAO,SAASC,mBAAmBA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EAChD;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA,MAAM,CAACC,IAAI,EAAEC,cAAc,CAAC,GAAGhB,UAAU,CAACC,YAAY,EAAE,EAAE,CAAC,CAAC,CAAC;;EAE7D,MAAMgB,qBAAqB,GAAG;IAC5B;IACAZ,WAAW,EAAEU,IAAI;IAAE;IACnBT,WAAWA,CAACC,KAAK,EAAE;MACjB,MAAMW,aAAa,GAAGC,QAAQ,CAACZ,KAAK,CAACa,MAAM,CAACC,KAAK,CAAC;MAClD,MAAMC,SAAS,GAAGf,KAAK,CAACa,MAAM,CAACG,OAAO;MACtC;MACAP,cAAc,CAAC;QACbQ,IAAI,EAAE,MAAM;QACZC,OAAO,EAAE;UAAEC,EAAE,EAAER,aAAa;UAAEI;QAAU;MAC1C,CAAC,CAAC;IACJ,CAAC;IACDd,cAAcA,CAACC,IAAI,EAAEC,OAAO,EAAEC,QAAQ,EAAE;MACtC,IAAIgB,aAAa,GAAG,EAAE;MACtB,IAAI,CAAClB,IAAI,EAAE;QACTkB,aAAa,CAACC,IAAI,CAAC,cAAc,CAAC;MACpC;MAEA,IAAI,CAAClB,OAAO,EAAE;QACZiB,aAAa,CAACC,IAAI,CAAC,kBAAkB,CAAC;MACxC;;MAEA;MACA,IAAI,CAACnB,IAAI,IAAI,CAACC,OAAO,EAAE;QACrB;QACAC,QAAQ,CAACkB,OAAO,CAACC,IAAI,CAACH,aAAa,CAAC;QACpC;QACA,OAAO,KAAK;MACd;MACA;MACAX,cAAc,CAAC;QAAEQ,IAAI,EAAE,KAAK;QAAEC,OAAO,EAAE;UAAEhB,IAAI;UAAEC;QAAQ;MAAE,CAAC,CAAC;MAC3D,OAAO,IAAI;IACb;EACF,CAAC;;EAED;EACA;EACA,oBACEP,OAAA,CAACC,WAAW,CAAC2B,QAAQ;IAACV,KAAK,EAAEJ,qBAAsB;IAAAJ,QAAA,EAChDA;EAAQ;IAAAmB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B;AAACrB,EAAA,CAxDeF,mBAAmB;AAAAwB,EAAA,GAAnBxB,mBAAmB;AAAA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}